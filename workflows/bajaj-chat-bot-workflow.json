{
    "name": "Demo: RAG in n8n",
    "nodes": [
      {
        "parameters": {
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "typeVersion": 1.2,
        "position": [
          528,
          480
        ],
        "id": "6ea78663-cf2f-4f2d-8e68-43047c2afd87",
        "name": "Embeddings OpenAI",
        "credentials": {
          "openAiApi": {
            "id": "0iYqOXFuHNV5HXJ6",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "dataType": "binary",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "typeVersion": 1.1,
        "position": [
          320,
          160
        ],
        "id": "94aecac0-03f9-4915-932b-d14a2576607b",
        "name": "Default Data Loader"
      },
      {
        "parameters": {
          "content": "### Readme\nLoad your data into a vector database with the üìö **Load Data** flow, and then use your data as chat context with the üêï **Retriever** flow.\n\n**Quick start**\n1. Click on the `Execute Workflow` button to run the üìö **Load Data** flow.\n2. Click on `Open Chat` button to run the üêï **Retriever** flow. Then ask a question about content from your document(s)\n\n\nFor more info, check [our docs on RAG in n8n](https://docs.n8n.io/advanced-ai/rag-in-n8n/).",
          "height": 300,
          "width": 440,
          "color": 4
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          -656,
          -64
        ],
        "typeVersion": 1,
        "id": "0d07742b-0b36-4c2e-990c-266cbe6e2d4d",
        "name": "Sticky Note"
      },
      {
        "parameters": {
          "content": "### üìö Load Data Flow",
          "height": 460,
          "width": 700,
          "color": 7
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          -176,
          -144
        ],
        "typeVersion": 1,
        "id": "d19d04f3-5231-4e47-bed7-9f24a4a8f582",
        "name": "Sticky Note1"
      },
      {
        "parameters": {
          "mode": "insert",
          "memoryKey": {
            "__rl": true,
            "value": "vector_store_key",
            "mode": "list",
            "cachedResultName": "vector_store_key"
          }
        },
        "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
        "typeVersion": 1.2,
        "position": [
          80,
          0
        ],
        "id": "bf50a11f-ca6a-4e04-a6d2-42fee272b260",
        "name": "Insert Data to Store"
      },
      {
        "parameters": {
          "mode": "retrieve-as-tool",
          "toolName": "knowledge_base",
          "toolDescription": "Use this knowledge base to answer questions from the user",
          "memoryKey": {
            "__rl": true,
            "mode": "list",
            "value": "vector_store_key"
          }
        },
        "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
        "typeVersion": 1.2,
        "position": [
          944,
          208
        ],
        "id": "09c0db62-5413-440e-8c13-fb6bb66d9b6a",
        "name": "Query Data Tool"
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "={{ $json.chatInput }}",
          "options": {
            "systemMessage": "=YOU ARE AN EXPERT INSURANCE ASSISTANT SPECIALIZED IN SEMANTIC RETRIEVAL FROM POLICY DOCUMENTS.\n\nYOUR OBJECTIVE:\nTo help the user understand if their insurance policy covers a specific situation by:\n1. Rewriting their query into 4‚Äì5 formal, semantically diverse search queries.\n2. Retrieving evidence for each query using the knowledge_base tool (vector search).\n3. Answering each query with a formal Yes, No, or Not Sure along with a legal-style justification and payble amount if yes.\n4. Retrying any query that results in Not Sure due to poor retrieval (max 2 retries).\n5. Producing a final combined answer: Yes or No + justification using all the retrieved context.\n\n---\n\n### STEP 1: ANALYZE THE USER'S QUESTION\n\nExtract key dimensions from the plain-English query:\n- Insurance type (health, life, motor)\n- Concern (e.g., surgery, maternity, exclusion, accident)\n- Attributes (age, procedure, city, gender, policy duration)\n- Legal concepts (waiting period, pre-existing disease, network hospital, sub-limit, daycare, permanent exclusion)\n\n---\n\n### STEP 2: GENERATE 4‚Äì5 SEMANTIC SEARCH QUERIES\n\nCreate legally precise, embedding-friendly semantic queries to explore different angles like:\n- Coverage eligibility\n- Waiting periods\n- Exclusion clauses\n- Day care vs hospitalization classification\n- Geographic/network constraints\n-paybel amount if yes\n\n**Example Input Query:**\n\"46-year-old male, knee surgery in Pune, 3-month-old health insurance policy\"\n\n**Generated Semantic Queries:**\n```json\n[\n  \"Does the policy cover arthroscopic knee surgery under day care treatments?\",\n  \"Is knee meniscectomy eligible for claim under a 3-month-old health insurance policy?\",\n  \"Are orthopedic surgeries excluded within the first 90 days of policy inception?\",\n  \"Is a 46-year-old eligible for knee replacement coverage under current waiting period clauses?\",\n  \"Are knee surgeries in Pune hospitals eligible for network hospital reimbursement?\",\n  \"what is payble amount for knee surgeries\"\n]\nSTEP 3: FOR EACH SEMANTIC QUERY\n\n1. RETRIEVE:\n   - Use the `knowledge_base` tool to fetch top 3‚Äì5 relevant policy chunks.\n\n2. EVALUATE:\n   - If relevant information is retrieved:\n     - Answer: \"Yes\" or \"No\"\n     - Justify based on actual clauses or logic.\n   - If information is insufficient or ambiguous:\n     - Answer: \"Not sure\"\n     - Justify that retrieval was vague or lacking\n\n3. RETRY ON ‚ÄúNOT SURE‚Äù:\n   - Rephrase the query to be more specific,      for which quation or infromation you \n     want ans now.but max 4\n   - Retry retrieval and evaluation\n   - do it until you are not satistfid \n{\n  \"query\": \"<semantic_query>\",\n  \"answer\": \"Yes | No | Not sure\",\n  \"justification\": \"<short legal-style justification based on retrieved text>\"\n}\nSTEP 4: COMBINE FINAL ANSWER\n\nAfter all semantic queries have been resolved:\n\n1. Synthesize a final judgment: Yes or No  \n   (based on the majority or most decisive answers from above)\n\n2. Justify the answer using the retrieved evidence:\n   ‚Ä¢ Refer to waiting period/exclusion clauses  \n   ‚Ä¢ Mention any exceptions  \n   ‚Ä¢ Be formal and objective\n\nFinal Answer Format:\n{\"thinking\":{all subquary and their justificaion in  \n    \"answer\": \"Yes | No\",(must)\n    \"justification\": \"<Formal summary combining all findings from individual queries>\"formate}} \n\nFinal ans:\n\n\\n\\n\\nanswer: \"Yes | No,(must) and < justificationFormal summary combining all findings from individual queries>\"\n  \nRULES & SAFETY\nOnly say ‚ÄúNot sure‚Äù if retrieval was truly insufficient. Otherwise, retry.\n\nStop retrying after 4 attempts per query\n\nAvoid assumptions ‚Äî rely on retrieved text only.\n\nBe formal, factual, and contract-aware.\n\nNever return partial or vague final answers ‚Äî always return a clear Yes/No + justification.\n\nGOAL\nHelp users confidently understand their insurance rights and claim eligibility using:\n\nMultiple legal perspectives\n\nVector-based retrieval\n\nRetry on failure\n\nClear final outcome."
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2,
        "position": [
          944,
          -16
        ],
        "id": "579aed76-9644-42d1-ac13-7369059ff1c2",
        "name": "AI Agent",
        "notesInFlow": true
      },
      {
        "parameters": {
          "model": {
            "__rl": true,
            "value": "gpt-4.1-mini",
            "mode": "list",
            "cachedResultName": "gpt-4.1-mini"
          },
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1.2,
        "position": [
          720,
          208
        ],
        "id": "b5aa8942-9cd5-4c2f-bd77-7a0ceb921bac",
        "name": "OpenAI Chat Model",
        "credentials": {
          "openAiApi": {
            "id": "0iYqOXFuHNV5HXJ6",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "content": "### üêï 2. Retriever Flow",
          "height": 460,
          "width": 680,
          "color": 7
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          608,
          -64
        ],
        "typeVersion": 1,
        "id": "28bc73a1-e64a-47bf-ac1c-ffe644894ea5",
        "name": "Sticky Note2"
      },
      {
        "parameters": {
          "content": "### Embeddings\n\nThe Insert and Retrieve operation use the same embedding node.\n\nThis is to ensure that they are using the **exact same embeddings and settings**.\n\nDifferent embeddings might not work at all, or have unintended consequences.\n",
          "height": 240,
          "width": 320,
          "color": 4
        },
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          672,
          448
        ],
        "typeVersion": 1,
        "id": "0cf8c647-418c-4d1a-8952-766145afca72",
        "name": "Sticky Note3"
      },
      {
        "parameters": {},
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          1184,
          592
        ],
        "typeVersion": 1,
        "id": "c0c78869-e131-4f53-b1b9-eb8de1ca317f",
        "name": "Sticky Note4"
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "377af27e-a93c-428b-b802-1534a86a72bf",
          "responseMode": "responseNode",
          "options": {}
        },
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 2,
        "position": [
          -128,
          0
        ],
        "id": "02caa8fc-553a-4d4d-b9c3-4a827517ccec",
        "name": "Webhook",
        "webhookId": "377af27e-a93c-428b-b802-1534a86a72bf"
      },
      {
        "parameters": {
          "public": true,
          "mode": "webhook",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "typeVersion": 1.1,
        "position": [
          688,
          -32
        ],
        "id": "3d327b7a-0bc8-45d2-baa5-6b15083669f9",
        "name": "When chat message received",
        "webhookId": "adc8a081-9993-40ff-9e5d-382ca996999b"
      },
      {
        "parameters": {
          "options": {}
        },
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.4,
        "position": [
          416,
          16
        ],
        "id": "849c4562-8b00-4a2d-bb63-8501071e576a",
        "name": "Respond to Webhook"
      }
    ],
    "pinData": {
      "When chat message received": [
        {
          "json": {
            "action": "sendMessage",
            "sessionId": "46962685-86f8-4ef0-ae1b-7633e917e67a",
            "chatInput": "\n\"Is knee surgery covered for a 46-year-old male?\""
          }
        }
      ]
    },
    "connections": {
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Insert Data to Store",
              "type": "ai_embedding",
              "index": 0
            },
            {
              "node": "Query Data Tool",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Insert Data to Store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Query Data Tool": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Insert Data to Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent": {
        "main": [
          []
        ]
      },
      "When chat message received": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Insert Data to Store": {
        "main": [
          [
            {
              "node": "Respond to Webhook",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": true,
    "settings": {
      "executionOrder": "v1"
    },
    "versionId": "b83ed35d-320d-4966-a7ef-24fe0207093a",
    "meta": {
      "templateId": "rag-starter-template",
      "templateCredsSetupCompleted": true,
      "instanceId": "36d5a32bfbb67ba95804f26ff914a4ae4a52c5912c5632c4a47cc512ffa9937a"
    },
    "id": "MBy2OhicBPE4IUyn",
    "tags": []
  }